from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import CallbackQuery, Message
from lexicon.lexicon import LEXICON_RU
from keyboards.inline.inline_main_menu import create_inline_kb_main_menu
from keyboards.inline.inline_employee import inline_kb_employee


router = Router()


@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text=f"{message.from_user.first_name}, {LEXICON_RU['/start']}")


@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/help'])
    await message.delete()



@router.message(Command(commands='main_menu'))
async def get_main_menu(message: Message):
    keyboard = create_inline_kb_main_menu(2, 'btn_main_menu_1', 'btn_main_menu_2', 'btn_main_menu_3', 'btn_main_menu_4',
                                'btn_main_menu_5', 'btn_main_menu_6', 'btn_main_menu_7', 'download_app')
    await message.answer(
        text='–í –¥–∞–Ω–Ω–æ–º –±–ª–æ–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π.'
             '–ò–ª–∏ –∂–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫ –ª–∏—á–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ü§ì.',
        reply_markup=keyboard
    )
    await message.delete()

    #vkj;zlxkcv


@router.message(Command(commands='employee'))
async def get_main_menu(message: Message):
    await message.answer(
        text='–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∑–æ–Ω—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ –±–æ—Ç–∞ BUN_bot. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–æ–∑–º–æ–∂–Ω—Å—Ç—è–º–∏ –±–æ—Ç–∞ –∏ –ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.',
        reply_markup=inline_kb_employee
    )
    await message.delete()


@router.message(Command(commands='description'))
async def get_description(message: Message):
    await message.answer(text=LEXICON_RU['/description'])
    await message.delete()


@router.message()
async def send_echo(message: Message):
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.reply(text=LEXICON_RU['no_echo'])
